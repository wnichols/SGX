# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "puphpet/ubuntu1404-x64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 3389, host: 13389
  
  # enable ssh x11 forwarding 
  config.ssh.forward_x11 = true
  
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "..", "/LinuxSGX"

  config.vm.provider "virtualbox" do |v|
	v.memory = 2048
	v.cpus = 2
  end


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when bootingsudo DELETE_CURRENT_ECLIPSE=false ECLIPSE_HOME=/opt/eclipse RELEASE_ID=001  ./build.sh the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
	add-apt-repository ppa:x2go/stable
    apt-get update
    apt-get install -y dictionaries-common
    apt-get remove -y dictionaries-common
    apt-get install -y dictionaries-common
    apt-get install -y python-software-properties build-essential ocaml automake autoconf libtool wget python
    apt-get install -y libcurl4-openssl-dev protobuf-compiler protobuf-c-compiler libprotobuf-dev libprotobuf-c0-dev
	apt-get install -y xfce4
    apt-get install -y default-jdk xrdp x2goserver x2goserver-xsession 
    apt-get install -y gdb
    apt-get install -y unzip zip 
    service xrdp restart

	echo "************************************************"
	echo "*                                              *"
	echo "*  Installed base system                       *"
	echo "*                                              *"
	echo "************************************************"
	sleep 10
	
    mkdir -p /home/vagrant/git/github.com
    cd /home/vagrant/git/github.com
    git clone https://github.com/01org/linux-sgx
    cd /home/vagrant/git/github.com/linux-sgx/sdk
    make clean
    make USE_OPT_LIBS=0 DEBUG=1
	echo "************************************************"
	echo "*                                              *"
	echo "*  LINUX-SGX BUILT SUCCESSFULLY (I hope)       *"
	echo "*                                              *"
	echo "************************************************"
	sleep 10

    cd /home/vagrant/git/github.com/linux-sgx/
    make sdk_install_pkg USE_OPT_LIBS=0
	sudo echo "yes"|/home/vagrant/git/github.com/linux-sgx/linux/installer/bin/sgx_linux_x64_sdk*.bin 
	echo "Downloading eclipse 4.5.1..... this will take a while so be patient."
	cd /tmp
	#wget --quiet "http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/2/eclipse-cpp-mars-2-linux-gtk-x86_64.tar.gz&mirror_id=1" -O eclipse.tar.gz
	wget --quiet "http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops4/R-4.5.1-201509040015/eclipse-SDK-4.5.1-linux-gtk-x86_64.tar.gz" -O eclipse.tar.gz
	tar xzf eclipse.tar.gz
	rm -rf /opt/eclipse
	mv eclipse /opt
	echo "************************************************"
	echo "*                                              *"
	echo "*  Installing the CDT environment for eclipse  *"
	echo "*                                              *"
	echo "************************************************"
	sudo /opt/eclipse/eclipse -clean -purgeHistory -application org.eclipse.equinox.p2.director -noSplash -repository http://download.eclipse.org/tools/cdt/releases/8.8.1 -installIUs org.eclipse.cdt.feature.group
	cd /home/vagrant/git/github.com/linux-sgx/Linux_SGXEclipsePlugin
	echo "DELETE_CURRENT_ECLIPSE=false ECLIPSE_HOME=/opt/eclipse RELEASE_ID=001  ./build.sh "
	sudo DELETE_CURRENT_ECLIPSE=false ECLIPSE_HOME=/opt/eclipse RELEASE_ID=001  ./build.sh

	echo "************************************************"
	echo "*                                              *"
	echo "*  Installing the SGX plugin for eclipse       *"
	echo "*                                              *"
	echo "************************************************"
	sudo /opt/eclipse/eclipse -clean -purgeHistory -application org.eclipse.equinox.p2.director -noSplash -repository jar:file:///home/vagrant/git/github.com/linux-sgx/Linux_SGXEclipsePlugin/build_directory/updatesite/sgx-eclipse-plugin/Intel-sgx-eclipse-plugin.zip -installIUs com.intel.sgx.feature

	
    echo "YOU CAN USE REMOTEDESKTOP TO ACCESS THIS MACHINE ON PORT 13389"
       
    echo "LD_LIBRARY_PATH=/home/vagrant/git/github.com/linux-sgx/sgxsdk/sdk_libs" > /etc/profile.d/sgx_path.sh
    
  SHELL
end
